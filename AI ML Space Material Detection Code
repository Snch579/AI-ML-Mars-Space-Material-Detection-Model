import streamlit as st
from inference_sdk import InferenceHTTPClient
from PIL import Image
import tempfile
import pandas as pd
import altair as alt

st.set_page_config(page_title="Martian Material Classifier + Energy Dashboard", layout="wide")

st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap');

        .main {
            background: linear-gradient(135deg, #0f0c29 0%, #302b63 50%, #24243e 100%);
            color: #e6e6e6;
            font-family: 'Orbitron', sans-serif;
        }
        h1, h2, h3 {
            color: #00aaff;
            text-shadow: 2px 2px 4px #000000;
        }
        .stApp {
            background-color: transparent;
        }
        .metric-container {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 1rem;
            margin-top: 2rem;
        }
        .metric-box {
            background: rgba(0, 170, 255, 0.1);
            border: 1px solid #00aaff;
            border-radius: 10px;
            padding: 1.5rem;
            text-align: center;
            flex: 1 1 200px;
            box-shadow: 0 0 15px rgba(0, 170, 255, 0.5);
            transition: all 0.3s ease-in-out;
        }
        .metric-box:hover {
            transform: scale(1.05);
            box-shadow: 0 0 25px rgba(0, 170, 255, 0.8);
        }
        .metric-label {
            color: #aaa;
            font-size: 1rem;
        }
        .metric-value {
            font-size: 1.8rem;
            color: #fff;
            font-weight: 700;
        }
        .stFileUploader > div > div > button {
            background-color: #00aaff;
            color: white;
        }
        .stImage > img {
            border: 2px solid #00aaff;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 170, 255, 0.5);
        }
        .stExpander {
            background: rgba(0, 170, 255, 0.1);
            border: 1px solid #00aaff;
            border-radius: 10px;
            margin-top: 1rem;
        }
    </style>
""", unsafe_allow_html=True)


client = InferenceHTTPClient(
    api_url="https://serverless.roboflow.com",
    api_key="********************"
)


st.title(" Martian Material Classifier + Energy Conversion Dashboard")
st.markdown("""
<p style="font-size: 1.2rem; color: #b0c4de;">
This app simulates the <b>Jezero Loop Object Recognition Program</b>, which automatically sorts Martian waste
into recyclable categories based on image recognition and material analysis.
</p>
<p style="font-size: 1.1rem; color: #b0c4de;">
Upload a material image to classify it and estimate how much energy is required for <b>different recycling or conversion methods</b>.
Each process (melting, shredding, sealing) includes unique <b>use cases</b> and <b>energy estimates</b>.
</p>
""", unsafe_allow_html=True)


material_process_use = {
    "aluminum_strut": {
        "Melted": "Recast into new structural beams or tool parts.",
        "Shredded": "Used as lightweight aggregate in regolith-based concrete.",
        "Cut & Seal": "Used to create modular connection plates.",
        "Heat Seal": "Not applicable (metal)."
    },
    "steel_plate": {
        "Melted": "Forged into durable replacement panels or support beams.",
        "Shredded": "Mixed into regolith as reinforcement fiber.",
        "Cut & Seal": "Precision-cut for structural patching.",
        "Heat Seal": "Not applicable (metal)."
    },
    "plastic_sheet": {
        "Melted": "Formed into insulation panels, trays, or containers.",
        "Shredded": "Pelletized for 3D printing filament.",
        "Cut & Seal": "Used to seal grow bags or moisture barriers.",
        "Heat Seal": "Used for airtight bags or insulation sheets."
    },
    "foam_block": {
        "Melted": "Not applicable (non-meltable).",
        "Shredded": "Used for acoustic or vibration insulation.",
        "Cut & Seal": "Cut for insulation or packaging blocks.",
        "Heat Seal": "Bonded into large insulation panels."
    },
    "fabric_cloth": {
        "Melted": "Not applicable (non-meltable).",
        "Shredded": "Used as fiber filler or thermal blankets.",
        "Cut & Seal": "Sewn into bags or layered filters.",
        "Heat Seal": "Used to laminate insulation or composite layers."
    },
    "rubber_sheet": {
        "Melted": "Recast into gaskets or flexible seals.",
        "Shredded": "Used for vibration-dampening layers.",
        "Cut & Seal": "Used to seal habitat joints.",
        "Heat Seal": "Used for airtight sealing or patching."
    },
    "paper": {
        "Melted": "Not applicable.",
        "Shredded": "Used as compost material or regolith mulch.",
        "Cut & Seal": "Used for craft or labeling insulation.",
        "Heat Seal": "Not applicable."
    },
    "cardboard": {
        "Melted": "Not applicable.",
        "Shredded": "Used for packaging or insulation fill.",
        "Cut & Seal": "Used as panels or disposable trays.",
        "Heat Seal": "Not applicable."
    },
    "bubble_wrap": {
        "Melted": "Formed into flexible insulation sheets.",
        "Shredded": "Used for packing or grow-bed insulation.",
        "Cut & Seal": "Used as moisture wraps.",
        "Heat Seal": "Used for greenhouse window insulation."
    }
}


material_properties = {
    "aluminum_strut": {"meltable": True, "melting_point": 660, "latent_heat_fusion_J_per_kg": 397000, "specific_heat_J_per_kgC": 900,
                       "shreddable": True, "energy_shred_J_per_kg": 20000, "cut_sealable": True, "energy_cutseal_J_per_kg": 10000, "heat_sealable": False},
    "steel_plate": {"meltable": True, "melting_point": 1370, "latent_heat_fusion_J_per_kg": 272000, "specific_heat_J_per_kgC": 500,
                    "shreddable": True, "energy_shred_J_per_kg": 40000, "cut_sealable": True, "energy_cutseal_J_per_kg": 15000, "heat_sealable": False},
    "plastic_sheet": {"meltable": True, "melting_point": 260, "latent_heat_fusion_J_per_kg": 140000, "specific_heat_J_per_kgC": 1200,
                      "shreddable": True, "energy_shred_J_per_kg": 15000, "cut_sealable": True, "energy_cutseal_J_per_kg": 10000,
                      "heat_sealable": True, "energy_heatseal_J_per_kg": 18000},
    "foam_block": {"meltable": False, "shreddable": True, "energy_shred_J_per_kg": 8000, "cut_sealable": False,
                   "heat_sealable": True, "energy_heatseal_J_per_kg": 12000},
    "fabric_cloth": {"meltable": False, "shreddable": True, "energy_shred_J_per_kg": 5000, "cut_sealable": True,
                     "energy_cutseal_J_per_kg": 5000, "heat_sealable": True, "energy_heatseal_J_per_kg": 9000},
    "rubber_sheet": {"meltable": True, "melting_point": 170, "latent_heat_fusion_J_per_kg": 80000, "specific_heat_J_per_kgC": 1000,
                     "shreddable": True, "energy_shred_J_per_kg": 12000, "cut_sealable": True, "energy_cutseal_J_per_kg": 10000,
                     "heat_sealable": True, "energy_heatseal_J_per_kg": 15000},
    "paper": {"meltable": False, "shreddable": True, "energy_shred_J_per_kg": 4000, "cut_sealable": True,
              "energy_cutseal_J_per_kg": 3000, "heat_sealable": False},
    "cardboard": {"meltable": False, "shreddable": True, "energy_shred_J_per_kg": 5000, "cut_sealable": True,
                  "energy_cutseal_J_per_kg": 4000, "heat_sealable": False},
    "bubble_wrap": {"meltable": True, "melting_point": 130, "latent_heat_fusion_J_per_kg": 200000, "specific_heat_J_per_kgC": 1800,
                    "shreddable": True, "energy_shred_J_per_kg": 10000, "cut_sealable": True, "energy_cutseal_J_per_kg": 8000,
                    "heat_sealable": True, "energy_heatseal_J_per_kg": 12000}
}


def run_workflow(image_path):
    return client.run_workflow(
        workspace_name="the-martian-method",
        workflow_id="custom-workflow",
        images={"image": image_path},
        use_cache=True
    )


def calculate_energy(props, mass):
    total_J = 0
    details = {}


    if props.get("meltable"):
        c = props.get("specific_heat_J_per_kgC", 0)
        lf = props.get("latent_heat_fusion_J_per_kg", 0)
        mp = props.get("melting_point", 25)
        Q_heat = mass * c * (mp - 25)
        Q_melt = mass * lf
        details["Melting"] = Q_heat + Q_melt


    if props.get("shreddable"):
        details["Shredding"] = mass * props.get("energy_shred_J_per_kg", 0)


    if props.get("cut_sealable"):
        details["Cut & Seal"] = mass * props.get("energy_cutseal_J_per_kg", 0)


    if props.get("heat_sealable"):
        details["Heat Seal"] = mass * props.get("energy_heatseal_J_per_kg", 0)


    total_J = sum(details.values())
    details_kWh = {k: v / 3.6e6 for k, v in details.items()}
    return total_J / 3.6e6, details_kWh


st.markdown("### 1. Upload Image")
uploaded_image = st.file_uploader("Upload Material Image", type=["jpg", "jpeg", "png"])


if uploaded_image:
    col1, col2 = st.columns([1, 2])
    with col1:
        img = Image.open(uploaded_image)
        st.image(img, caption="Uploaded Material", use_column_width=True)


    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp:
        tmp.write(uploaded_image.getbuffer())
        path = tmp.name


    with st.spinner("Running AI classification..."):
        try:
            result = run_workflow(path)
            label = result[0]["open_ai"]["output"]
            with col2:
                st.markdown(f"<h2 style='text-align:center;color:#00aaff; font-size: 2.5rem;'>{label.upper()}</h2>", unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error: {e}")
            label = None


    if label and label in material_properties:
        st.markdown("---")
        st.markdown("### 2. Material Energy and Conversion Summary")


        props = material_properties[label]
        mass = st.slider("Mass of Material (kg)", 0.1, 50.0, 5.0, 0.1)
        total_kWh, breakdown = calculate_energy(props, mass)


        st.markdown("#### Energy per Process")
        st.markdown('<div class="metric-container">', unsafe_allow_html=True)
        for process, val in breakdown.items():
            st.markdown(f"""
                <div class="metric-box">
                    <div class="metric-label">{process}</div>
                    <div class="metric-value">{val:.3f} kWh</div>
                </div>
            """, unsafe_allow_html=True)
        st.markdown(f"""
            <div class="metric-box" style="border-color: #ff4500;">
                <div class="metric-label">Total</div>
                <div class="metric-value" style="color: #ff4500;">{total_kWh:.3f} kWh</div>
            </div>
        """, unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)


        df = pd.DataFrame(list(breakdown.items()), columns=["Process", "Energy (kWh)"])
        chart = (
            alt.Chart(df)
            .mark_bar(cornerRadiusTopLeft=6, cornerRadiusTopRight=6, color="#00aaff")
            .encode(
                x=alt.X("Process", sort=None, axis=alt.Axis(labelAngle=0, labelColor='white', titleColor='white')),
                y=alt.Y("Energy (kWh)", axis=alt.Axis(labelColor='white', titleColor='white')),
                tooltip=["Process", "Energy (kWh)"]
            )
            .properties(height=300, background='transparent')
            .configure_view(strokeOpacity=0)
        )
        st.altair_chart(chart, use_container_width=True)



        st.markdown("### 3. Conversion Use Cases and Applications")


        uses = material_process_use.get(label, {})


        detailed_explanations = {
            "aluminum_strut": {
                "Melted": "On Mars, molten aluminum is refined to remove contaminants and recast into lightweight structural beams, brackets, and replacement tools. The high recyclability and low density make it ideal for habitats and rover parts.",
                "Shredded": "Shredded aluminum flakes are mixed with regolith to create composite panels and lightweight reinforcement materials for temporary structures or filler in printed components.",
                "Cut & Seal": "Precision cutting and sealing create mounting plates and connector brackets for habitat modules and sensor mounts without the energy cost of full remelting."
            },
            "steel_plate": {
                "Melted": "Steel is melted and re-forged into load-bearing frames and repair plates for heavy equipment used in mining and habitat assembly on Mars.",
                "Shredded": "Shredded steel fibers serve as reinforcement in regolith concrete or as an aggregate to improve compressive strength of construction blocks.",
                "Cut & Seal": "Laser cutting repurposes plates into patches and support brackets for high-stress mechanical systems."
            },
            "plastic_sheet": {
                "Melted": "Plastic sheets (thermoplastics) are remelted and injection- or extrusion-molded into storage containers, piping segments, and insulation modules.",
                "Shredded": "Shredded plastic is pelletized and used as filament feedstock for 3D printing spare parts, fixtures, and custom components.",
                "Cut & Seal": "Cutting and seam-sealing produce flexible liners, modular insulation panels, and moisture barriers for greenhouse modules.",
                "Heat Seal": "Heat sealing enables airtight, bonded assemblies for food packaging and vapor-tight insulation in closed-loop systems."
            },
            "foam_block": {
                "Shredded": "Shredded foam becomes lightweight packing, acoustic insulation, or filler material to reduce mass while providing thermal damping.",
                "Cut & Seal": "Cut foam sections are shaped into insulating blocks or cushioning for sensitive instruments, improving thermal control inside habitats.",
                "Heat Seal": "Bonding foam pieces together creates larger insulation blankets for habitat walls or thermal covers."
            },
            "fabric_cloth": {
                "Shredded": "Shredded fabric fibers are repurposed as insulating batting or mixed into composite mats for filtration or thermal layering.",
                "Cut & Seal": "Cut and sewn fabric forms filters, storage bags, or layered protective garments tailored to Martian dust conditions.",
                "Heat Seal": "Heat-laminated fabric combines layers into composite membranes that provide moisture or dust barriers for greenhouses."
            },
            "rubber_sheet": {
                "Melted": "Reprocessing rubber yields gaskets and sealing strips for hatchways and plumbing that require elasticity in low-temperature operation.",
                "Shredded": "Shredded rubber is used as vibration-damping material under machinery or as flexible filler in multi-layered insulation.",
                "Cut & Seal": "Precision-cut rubber patches are applied to repair seals in airlock interfaces and habitat joints.",
                "Heat Seal": "Thermally bonded rubber provides fast, durable patching for pressurized conduits and flexible seals."
            },
            "paper": {
                "Shredded": "Shredded paper becomes compost feedstock combined with organic waste to enrich hydroponic or regolith growth media.",
                "Cut & Seal": "Cut paper stock can be used for temporary labels, templates, or biodegradable packaging during short missions.",
                "Heat Seal": "When combined with coatings or laminates, paper can form light-weight, heat-sealed covers for short-term protection."
            },
            "cardboard": {
                "Shredded": "Shredded cardboard is used as lightweight packing or combined with organic waste for soil amendments in controlled growth trials.",
                "Cut & Seal": "Cut cardboard panels serve as disposable trays, formwork, or insulating inserts in low-load applications."
            },
            "bubble_wrap": {
                "Melted": "Melted bubble wrap (if thermoplastic) can be reformed into thin insulation sheets or flexible packaging for fragile cargo.",
                "Shredded": "Shredded bubble material provides cushioning and insulating filler for containerized plant beds or shipped equipment.",
                "Cut & Seal": "Cut and sealed sheets are reused as moisture-trapping layers in greenhouse structures or insulation blankets.",
                "Heat Seal": "Heat-sealed bubble layers provide hermetic insulation layers for small-volume thermal protection."
            }
        }



        method_to_prop = {
            "Melted": "meltable",
            "Shredded": "shreddable",
            "Cut & Seal": "cut_sealable",
            "Heat Seal": "heat_sealable"
        }


        generic_explanation = "This process repurposes the material for useful functions in Martian operations."


        for method, desc in uses.items():
            prop_key = method_to_prop.get(method)
            applicable = True
            if desc.strip().lower().startswith("not applicable") or desc.strip().lower() == "not applicable (non-meltable)." or desc.strip().lower() == "not applicable (metal)." :
                applicable = False
            if prop_key:
                applicable = applicable and bool(props.get(prop_key, False))


            if not applicable:
                continue 


            with st.expander(f"{method} Applications", expanded=True):
                st.markdown(f"**Use Case Summary:** {desc}")
                detailed = detailed_explanations.get(label, {}).get(method)
                if detailed:
                    st.markdown(f"**Detailed Explanation:** {detailed}")
                else:
                    st.markdown(f"**Detailed Explanation:** {generic_explanation}")

                if method in breakdown:
                    st.markdown(f"**Estimated Energy for this process:** {breakdown[method]:.3f} kWh")
                st.markdown("---")
